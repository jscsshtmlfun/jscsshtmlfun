{"version":3,"sources":["common/Loading.js","common/SignIn.js","App.js","config/firebase.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","className","SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","loading","handleEmailChange","bind","assertThisInitialized","handlePasswordChange","handleSignIn","handleSignUp","handleResetPassword","handleSubmit","e","setState","target","value","error","alert","message","console","log","type","_this2","preventDefault","action","auth","sendPasswordResetEmail","then","createUserWithEmailAndPassword","signInWithEmailAndPassword","catch","catchError","firebaseAction","onSubmit","onChange","placeholder","autoFocus","required","onClick","common_Loading","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","user","onAuthStateChanged","src_common_SignIn","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10e9a8f7.chunk.js","sourcesContent":["import React from 'react';\nimport './Loading.css';\n\nfunction Loading() {\n\treturn (\n\t\t<div className=\"Loading\"></div>\n\t);\n}\n\nexport default Loading;\n","import React from 'react';\nimport './SignIn.css';\nimport Loading from './Loading';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\t\t\t/*\n      email: 'user@jscsshtmlfun.github.io',\n      password: 'fR58fT}F@)Mc*E\"S',\n\t\t\t*/\n      email: '',\n      password: '',\n      loading: false,\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleSignIn = this.handleSignIn.bind(this);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.handleResetPassword = this.handleResetPassword.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleSignIn(e) {\n    const email = this.state.email;\n    const password = this.state.password;\n    if (email && password) this.handleSubmit(e);\n  }\n\n  catchError(error) {\n    alert(error.message);\n    console.log(error);\n    this.setState({loading: false});\n  }\n\n  firebaseAction(e, type) {\n    e.preventDefault();\n    if (this.state.loading) return;\n    const auth = this.props.auth;\n    const email = this.state.email;\n    const password = this.state.password;\n    let action;\n    if (type === 'password-reset') {\n      action = auth.sendPasswordResetEmail(email).then(() => {\n        alert('Password reset email sent!');\n        this.setState({loading: false});\n      });\n    } else if (type === 'sign-up') {\n      action = auth.createUserWithEmailAndPassword(email, password);\n    } else if (type === 'sign-in') {\n      action = auth.signInWithEmailAndPassword(email, password);\n    }\n    action.catch(error => {this.catchError(error)});\n    this.setState({loading: true});\n  }\n\n  handleResetPassword(e) {\n    this.firebaseAction(e, 'password-reset');\n  }\n\n  handleSignUp(e) {\n    this.firebaseAction(e, 'sign-up');\n  }\n\n  handleSubmit(e) {\n    this.firebaseAction(e, 'sign-in');\n  }\n\n  render() {\n    return (\n\t\t\t<div className=\"SignIn text-center\">\n\t\t\t\t<form className=\"form-signin\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<h1 className=\"h3 mb-3 font-weight-normal\">\n\t\t\t\t\t\tWelcome\n\t\t\t\t\t</h1>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tvalue={this.state.email}\n\t\t\t\t\t\tonChange={this.handleEmailChange}\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tvalue={this.state.password}\n\t\t\t\t\t\tonChange={this.handlePasswordChange}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"btn btn-primary btn-block\" onClick={this.handleSignIn}>\n\t\t\t\t\t\tSign In\n\t\t\t\t\t</button>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<button className=\"btn btn-secondary\" onClick={this.handleSignUp}>\n\t\t\t\t\t\tSign Up\n\t\t\t\t\t</button>\n\t\t\t\t\t&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t<button className=\"btn btn-light\" onClick={this.handleResetPassword}>\n\t\t\t\t\t\tReset Password\n\t\t\t\t\t</button>\n\t\t\t\t\t{this.state.loading && <Loading/>}\n\t\t\t\t</form>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport config from './config/firebase';\nimport SignIn from './common/SignIn';\n\nconst auth = firebase.initializeApp(config).auth();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {user: false};\n  }\n\n  componentDidMount() {\n    auth.onAuthStateChanged(user => {\n      this.setState({user: user});\n    });\n  }\n\n  render() {\n    return <SignIn auth={auth}/>;\n  }\n}\n\nexport default App;\n","export default {\n  apiKey: \"AIzaSyA7YGM0a9FxNlJffuIvlJ552ILZ1WehHTo\",\n  authDomain: \"jscsshtmlfun.firebaseapp.com\",\n  databaseURL: \"https://jscsshtmlfun.firebaseio.com\",\n  projectId: \"jscsshtmlfun\",\n  storageBucket: \"\",\n  messagingSenderId: \"150568044428\",\n  appId: \"1:150568044428:web:3ede6716aac3dd0b\"\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}